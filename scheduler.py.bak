"""
Scheduler module for periodic tasks.

This module handles scheduling recurring tasks such as:
- Daily notification emails
- Weekly summary reports
- Periodic data cleanup

Usage:
    from scheduler import scheduler
    
    # Schedule a job
    @scheduler.scheduled_job('interval', minutes=5)
    def my_job():
        pass
        
    # Start the scheduler (typically done in main app)
    scheduler.start()
"""

import os
import logging
import atexit
from datetime import datetime, timedelta
import pytz
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Create the scheduler
scheduler = BackgroundScheduler(timezone=pytz.UTC)

# Set up job logging
def job_listener(event):
    """Log information about job execution/errors"""
    if event.code == EVENT_JOB_EXECUTED:
        logger.info(f"Job executed successfully: {event.job_id}")
    elif event.code == EVENT_JOB_ERROR:
        logger.error(f"Job error: {event.job_id}, {event.exception}")

scheduler.add_listener(job_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)

# Clean shutdown
def shutdown_scheduler():
    """Properly shut down the scheduler when the app exits"""
    if scheduler.running:
        scheduler.shutdown()
        logger.info("Scheduler shut down")

atexit.register(shutdown_scheduler)

# Store the PID for external management
def save_pid():
    """Save the current process ID to a file for external management"""
    with open("scheduler.pid", "w") as f:
        f.write(str(os.getpid()))
    logger.info(f"Saved scheduler PID: {os.getpid()}")

# Export the scheduler
__all__ = ['scheduler']